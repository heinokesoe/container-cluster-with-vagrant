ENV['VAGRANT_NO_PARALLEL'] = 'yes'
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'

MANAGER_NODE_CPUS     = 1
MANAGER_NODE_MEMORY   = 1024
MANAGER_NODE_COUNT    = 2

WORKER_NODE_CPUS     = 1
WORKER_NODE_MEMORY   = 1024
WORKER_NODE_COUNT    = 2

Vagrant.configure("2") do |config|

  (1..MANAGER_NODE_COUNT).each do |i|
    config.vm.define "manager#{i}" do |manager|
      manager.vm.box               = "heinokesoe/ubuntu-focal-with-docker"
      manager.vm.hostname          = "manager#{i}"
      manager.vm.network :private_network, :ip => "10.10.10.1#{i}"
      manager.vm.provider :libvirt do |libvirt|
        libvirt.cpus    = MANAGER_NODE_CPUS
        libvirt.memory  = MANAGER_NODE_MEMORY
        libvirt.nested  = true
      end
      manager.vm.provision :shell, :path => "manager.sh", :env => { "MANAGER_NODE_COUNT" => MANAGER_NODE_COUNT, "WORKER_NODE_COUNT" => WORKER_NODE_COUNT }
    end
  end

  (1..WORKER_NODE_COUNT).each do |i|
    config.vm.define "worker#{i}" do |worker|
      worker.vm.box               = "heinokesoe/ubuntu-focal-with-docker"
      worker.vm.hostname          = "worker#{i}"
      worker.vm.network :private_network, :ip => "10.10.10.2#{i}"
      worker.vm.provider :libvirt do |libvirt|
        libvirt.cpus    = WORKER_NODE_CPUS
        libvirt.memory  = WORKER_NODE_MEMORY
        libvirt.nested  = true
      end
      worker.vm.provision "shell", path: "worker.sh", env: { "MANAGER_NODE_COUNT" => MANAGER_NODE_COUNT, "WORKER_NODE_COUNT" => WORKER_NODE_COUNT }
    end
  end

end
